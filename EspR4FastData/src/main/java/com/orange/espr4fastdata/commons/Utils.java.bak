/* Copyright (C) 2014 Orange	

This software is distributed under the terms and conditions of the 
'GNU GENERAL PUBLIC LICENSE Version 2' license which can be found 
in the file 'LICENSE.txt' in this package distribution or at 
'http://www.gnu.org/licenses/gpl-2.0-standalone.html'. 
*/

package com.orange.espr4fastdata.commons;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.ProtocolException;
import java.net.Proxy;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.datatype.Duration;

import org.apache.log4j.Logger;

public class Utils {
  private static Logger logger = Logger.getLogger(Utils.class);

//----------------------------------------------------------------------------------------------------------------------  
/**
 * Call an URI with the chosen HTTP method.
 * @param targetUri the URI to call.
 * @param httpMethod the HTTP method to use. example: POST, GET etc...
 * @return the HTTP return code following the call
 * @throws IOException
 * @throws IllegalStateException
 * @throws IllegalArgumentException
 * @throws ProtocolException
 */

public int callURL(String targetUri, String httpMethod ) 
    throws IOException, IllegalStateException, IllegalArgumentException, ProtocolException {

  logger.debug("---- BEGIN / About to call URI \""+targetUri+"\" with method "+httpMethod+".");
  try {
    URL url = new URL(targetUri);
    HttpURLConnection urlConnection;

    urlConnection = (HttpURLConnection)url.openConnection();              
    urlConnection.setDoOutput(true);
    urlConnection.setRequestMethod(httpMethod);
    urlConnection.setRequestProperty("Content-Type", "application/xml;charset=UTF-8");

    int httpCode = urlConnection.getResponseCode();
    logger.debug("END / httpCode = "+httpCode);
    return httpCode;
  }
  catch(ProtocolException e) {throw new IllegalArgumentException(e); }
  catch(IllegalArgumentException e) { throw new IllegalArgumentException(e); }
  catch(IllegalStateException e) { throw new IllegalStateException(e); }
  catch(IOException e) { throw new IOException(e); }
}

//----------------------------------------------------------------------------------------------------------------------
/**
 * Call an URI with the chosen HTTP method. Carry the specified payload provided as a String object.
 * @param targetUri the URI to call.
 * @param httpMethod the HTTP method to use. example: POST, GET etc...
 * @param payload the payload content. 
 * @return the HTTP return code following the call
 * @throws IOException
 * @throws IllegalStateException
 * @throws IllegalArgumentException
 * @throws ProtocolException
 */
  public int callURL(String targetUri, String httpMethod, String payload, String proxyUrl, Integer proxyPort ) 
             throws IOException, IllegalStateException, IllegalArgumentException, ProtocolException {
     
    try {
      URL url = new URL(targetUri);
      HttpURLConnection httpUrlConnection;
 
      if( proxyUrl != null && !proxyUrl.equals("") && proxyPort != null ) {
        logger.debug("A proxy is defined with the following parameters: \""+proxyUrl+"\" on port \""+proxyPort+"\".");
        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyUrl, proxyPort));
        httpUrlConnection = (HttpURLConnection)url.openConnection(proxy);
      }
      else {
        logger.debug("No proxy configured.");
        httpUrlConnection = (HttpURLConnection)url.openConnection();
      }
      logger.debug("About to call URI \""+targetUri+"\" with method "+httpMethod+" and with the following payload:\n"+payload);                    
      httpUrlConnection.setDoOutput(true);
      httpUrlConnection.setRequestMethod(httpMethod);
      httpUrlConnection.setRequestProperty("Content-Type", "application/xml;charset=UTF-8");
      httpUrlConnection.setFixedLengthStreamingMode(payload.getBytes().length);
      httpUrlConnection.getOutputStream().write(payload.getBytes());

      int httpCode = httpUrlConnection.getResponseCode();      
      logger.debug("Returned httpCode = "+httpCode+" with reason phrase \""+httpUrlConnection.getResponseMessage()+"\"");

      return httpCode;
    }
    catch(ProtocolException e) {throw new IllegalArgumentException(e); }
    catch(IllegalArgumentException e) { throw new IllegalArgumentException(e); }
    catch(IllegalStateException e) { throw new IllegalStateException(e); }
    catch(IOException e) { throw new IOException(e); }
  }
//----------------------------------------------------------------------------------------------------------------------
/**
 * Serialize any Object to XML string representation. 
 * @param o the object to serialize to an XML String representation.
 * @return the resulting XML string.
 */
  public static String objectToFormattedXmlString(Object o) {
  StringWriter sw = new StringWriter();
  try{
    JAXBContext context = JAXBContext.newInstance(o.getClass());
    Marshaller m = context.createMarshaller();
    m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
    m.marshal(o, sw);
  }
  catch(JAXBException e){e.printStackTrace();}

  return sw.toString();
  }
//----------------------------------------------------------------------------------------------------------------------  
/** 
 * Deserialize an XML String to an object.
 * @param xmlString the XML String to convert.
 * @return a java object.
 * @throws IllegalAccessException 
 * @throws InstantiationException 
 * @throws JAXBException 
 */
  public static Object xmlStringToObject(String xmlString, Class<?> cls) 
  		throws InstantiationException, IllegalAccessException, JAXBException {
    Object object = null;
 	
 		object = cls.newInstance();
  		
 	  JAXBContext jaxbContext = JAXBContext.newInstance(cls);
 	  Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();

 	  StringReader reader = new StringReader(xmlString);
 	  object = unmarshaller.unmarshal(reader);
  	
  	return object;
  }  
//----------------------------------------------------------------------------------------------------------------------  
/**
 * Return the current date in milliseconds.
 * @return the current date in milliseconds as a String object.
 */
  public static long getCurrentGmtTimeStampInMs() {
    return Calendar.getInstance(TimeZone.getTimeZone("GMT")).getTimeInMillis();
  }
//----------------------------------------------------------------------------------------------------------------------  
/**
 * Return the current date in milliseconds.
 * @return the current date in milliseconds as a String object.
 */
  public static String getIso8601GmtTimeStamp() {
    return String.format("%04d-", Calendar.getInstance(TimeZone.getTimeZone("GMT")).get(Calendar.YEAR))+
    			 String.format("%02d-", Calendar.getInstance(TimeZone.getTimeZone("GMT")).get(Calendar.MONTH))+
    			 String.format("%02dT", Calendar.getInstance(TimeZone.getTimeZone("GMT")).get(Calendar.DAY_OF_MONTH))+
    			 String.format("%02d:", Calendar.getInstance(TimeZone.getTimeZone("GMT")).get(Calendar.HOUR))+
    			 String.format("%02d:", Calendar.getInstance(TimeZone.getTimeZone("GMT")).get(Calendar.MINUTE))+
    			 String.format("%02d+00:00", Calendar.getInstance(TimeZone.getTimeZone("GMT")).get(Calendar.SECOND));    
  }

//----------------------------------------------------------------------------------------------------------------------  
  /**
   * Store the text content of a file in a String.
   * @param filePath the file name
   * @return a String that features the file content.
   * @throws IOException
   */
  public static String readTextContentFromFile( String filePath ) throws IOException {
    BufferedReader bufferedReader = new BufferedReader( new FileReader (filePath));
    StringBuilder stringBuilder = new StringBuilder();
    String ls = System.getProperty("line.separator");

    String line = null;
    try {
    	while( ( line = bufferedReader.readLine() ) != null ) {
    		stringBuilder.append( line );
    		stringBuilder.append( ls );
      }
    }
    catch(IOException e) { throw new IOException(e); }
    
    bufferedReader.close();

    return stringBuilder.toString();
  }
//----------------------------------------------------------------------------------------------------------------------  
  /**
   * Overwrite text content to a file. If the file does not exist it is created. If it already exists it is overwritten.
   * @param filePath the file path.
   * @param textContent the text content to write within the file.
   */
  public static void writeTextContentToFile(String filePath, String textContent) throws FileNotFoundException,  
  																																											IOException {
	
  	try {
			Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filePath), "utf-8"));
			writer.write(textContent);
			writer.close();
		} 
		catch (UnsupportedEncodingException e) { e.printStackTrace();	} 
		catch (FileNotFoundException e) {	throw new FileNotFoundException(); } 
		catch (IOException e) {	throw new IOException(e); }
  }
//----------------------------------------------------------------------------------------------------------------------  
  /**
   * Check if a file exists.
   * @param filePath the path to the file.
   * @return true if the file exists, false otherwise.
   */
  public static boolean fileExists(String filePath) {
  	File f = new File(filePath);
  	if(f.exists()) { return true; }

  	return false;
  }
//----------------------------------------------------------------------------------------------------------------------  
  /**
   * @param filePath
   * @return true if the file was deleted, false if an error has occured.
   */
  public static boolean deleteFile(String filePath) { 

  	File file = new File(filePath);
		if(file.delete()) { return true; }

		return false;
  }
//----------------------------------------------------------------------------------------------------------------------
  public static String javaDurationToIso8601Duration(Duration duration) {
  	String isoDuration = "P";
  	
  	if(duration.getYears() != 0) isoDuration += duration.getYears()+"Y";
  	if(duration.getMonths() != 0) isoDuration += duration.getMonths()+"M";
  	if(duration.getDays() != 0) isoDuration += duration.getDays()+"D";
  	
  	if(duration.getHours() != 0 || duration.getMinutes() != 0 || duration.getSeconds() != 0 ) isoDuration += "T";
  	
  	if(duration.getHours() != 0) isoDuration += duration.getHours()+"H";
  	if(duration.getMinutes() != 0) isoDuration += duration.getMinutes()+"M";
  	if(duration.getSeconds() != 0) isoDuration += duration.getSeconds()+"S";  	
  	
  	return isoDuration;
  }  
//----------------------------------------------------------------------------------------------------------------------  
  public static String msTimeStampToIso8601(long timeInMs) {
    
  	Calendar calendar = Calendar.getInstance();
  	calendar.setTimeInMillis(timeInMs);
  	
  	Date date = calendar.getTime();
    
    String formatted = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(date);
    
    return formatted.substring(0, 22) + ":" + formatted.substring(22);
}

//----------------------------------------------------------------------------------------------------------------------
/** Transform ISO 8601 string to Calendar. */
  public static long iso8601ToMsTimeStamp(String iso8601String)
  throws ParseException {
  
  	Calendar calendar = Calendar.getInstance();
    String tmp = iso8601String.replace("Z", "+00:00");
    try {
    	tmp = tmp.substring(0, 22) + tmp.substring(23);  // to get rid of the ":"
    } 
    catch (IndexOutOfBoundsException e) {
      throw new ParseException("Invalid length", 0);
    }
    Date date = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").parse(tmp);
    calendar.setTime(date);
    return calendar.getTimeInMillis();
  }
//----------------------------------------------------------------------------------------------------------------------
  public static void checkTimeStampFormat( String iso8601String )
     	throws ParseException {
      
     	if( iso8601String.length() != 29 )
     		throw new ParseException("Invalid length", 0);
        	
     	// to get rid of the ":" in the zone section
     	iso8601String = iso8601String.substring(0, 26) + iso8601String.substring(27);  
     	
      new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").parse(iso8601String);
    }
//----------------------------------------------------------------------------------------------------------------------
  public static Date getDateTimeStampFromIso8601String( String iso8601String )
     	throws ParseException {
      
     	if( iso8601String.length() != 29 )
     		throw new ParseException("Invalid length", 0);
        	
     	// to get rid of the ":" in the zone section
     	iso8601String = iso8601String.substring(0, 26) + iso8601String.substring(27);  
     	
      return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").parse(iso8601String);
    }

}